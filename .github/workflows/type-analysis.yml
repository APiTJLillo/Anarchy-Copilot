name: Type Analysis

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  schedule:
    - cron: '0 0 * * *'  # Daily at midnight UTC
  workflow_dispatch:  # Allow manual triggers

jobs:
  analyze:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ["3.8", "3.9", "3.10"]

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0  # Fetch all history for historical analysis

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        python scripts/analyze_types.py --install

    - name: Load historical metrics
      id: history
      continue-on-error: true
      run: |
        if [ -f ".type-metrics-history.json" ]; then
          echo "::set-output name=exists::true"
        else
          echo "[]" > .type-metrics-history.json
          echo "::set-output name=exists::false"
        fi

    - name: Run type analysis
      run: |
        python scripts/analyze_types.py --strict --report --check-coverage
      env:
        PYTHONPATH: ${{ github.workspace }}

    - name: Update metrics history
      if: success() || failure()
      run: |
        python - <<EOF
        import json
        import datetime
        from pathlib import Path

        # Load current metrics
        metrics_file = Path("type_report/type_check_metrics.json")
        if not metrics_file.exists():
            exit(0)
            
        current = json.loads(metrics_file.read_text())
        
        # Load history
        history_file = Path(".type-metrics-history.json")
        history = json.loads(history_file.read_text())
        
        # Add new entry
        entry = {
            "timestamp": datetime.datetime.now().isoformat(),
            "commit": "${{ github.sha }}",
            "branch": "${{ github.ref }}",
            "coverage": current["type_coverage"],
            "performance": current["performance"]
        }
        
        # Keep last 30 entries
        history = history[-29:] + [entry]
        
        # Save updated history
        history_file.write_text(json.dumps(history, indent=2))
        EOF

    - name: Generate historical report
      if: success() || failure()
      run: |
        python - <<EOF
        import json
        import plotly.graph_objects as go
        from pathlib import Path
        
        # Load history
        history = json.loads(Path(".type-metrics-history.json").read_text())
        
        # Create timeline figure
        fig = go.Figure()
        
        # Add traces for different metrics
        dates = [entry["timestamp"] for entry in history]
        
        # Coverage metrics
        for metric in ["files_with_types", "typed_functions", "typed_variables"]:
            values = [entry["coverage"][metric] / entry["coverage"][f"total_{metric}"] * 100 
                     for entry in history]
            fig.add_trace(go.Scatter(
                x=dates,
                y=values,
                name=f"{metric.replace('_', ' ').title()} Coverage",
                mode='lines+markers'
            ))
        
        fig.update_layout(
            title="Type Coverage History",
            xaxis_title="Date",
            yaxis_title="Coverage (%)",
            yaxis_range=[0, 100]
        )
        
        # Save figure
        history_html = Path("type_report/coverage_history.html")
        fig.write_html(str(history_html))
        EOF

    - name: Upload type check report
      if: success() || failure()
      uses: actions/upload-artifact@v3
      with:
        name: type-analysis-report-py${{ matrix.python-version }}
        path: |
          type_report/
          .type-metrics-history.json
        retention-days: 90

    - name: Save metrics history
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-artifact@v3
      with:
        name: type-metrics-history
        path: .type-metrics-history.json
        retention-days: 90

    - name: Check coverage thresholds
      run: |
        python - <<EOF
        import json
        from pathlib import Path
        
        metrics = json.loads(Path("type_report/type_check_metrics.json").read_text())
        coverage = metrics["type_coverage"]
        
        # Define minimum thresholds
        thresholds = {
            "files": 80,
            "functions": 90,
            "variables": 70
        }
        
        # Check each metric
        failures = []
        for name, threshold in thresholds.items():
            metric = f"{name}_with_types" if name != "variables" else "typed_variables"
            total = f"total_{metric}"
            percentage = coverage[metric] / coverage[total] * 100
            if percentage < threshold:
                failures.append(f"{name.title()} coverage {percentage:.1f}% below threshold {threshold}%")
        
        if failures:
            print("Coverage thresholds not met:")
            for failure in failures:
                print(f"  {failure}")
            exit(1)
        EOF

    - name: Comment on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const metrics = JSON.parse(fs.readFileSync('type_report/type_check_metrics.json', 'utf8'));
          
          const coverage = metrics.type_coverage;
          const performance = metrics.performance;
          
          const comment = `## Type Analysis Results
          
          ### Coverage
          - Files: ${coverage.files_with_types}/${coverage.total_files} (${(coverage.files_with_types/coverage.total_files*100).toFixed(1)}%)
          - Functions: ${coverage.typed_functions}/${coverage.total_functions} (${(coverage.typed_functions/coverage.total_functions*100).toFixed(1)}%)
          - Variables: ${coverage.typed_variables}/${coverage.total_variables} (${(coverage.typed_variables/coverage.total_variables*100).toFixed(1)}%)
          
          ### Performance
          - Total Duration: ${performance.total_duration.toFixed(2)}s
          - Peak Memory: ${performance.max_memory_delta.toFixed(1)}MB
          
          [View full report](${process.env.GITHUB_SERVER_URL}/${process.env.GITHUB_REPOSITORY}/actions/runs/${process.env.GITHUB_RUN_ID})`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });
