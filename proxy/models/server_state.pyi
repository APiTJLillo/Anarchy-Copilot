from typing import Set, Dict, Optional, Any
import asyncio
from .connection import ProxyConnection

class ServerStats(Dict[str, Any]):
    total_connections: int
    active_connections: int
    bytes_transferred: int
    peak_memory_mb: float
    ssl_contexts_created: int
    ssl_contexts_cleaned: int
    start_time: Optional[float]

class ServerState:
    is_shutting_down: bool
    active_connections: Set[ProxyConnection]
    shutdown_event: asyncio.Event
    stats: ServerStats
    _stats_task: Optional[asyncio.Task]

    def __init__(self) -> None: ...

    async def start_stats_monitoring(self) -> None: ...
    async def stop_stats_monitoring(self) -> None: ...
    
    async def _monitor_stats(self) -> None: ...
    def _get_memory_usage(self) -> float: ...
    
    async def wait_for_shutdown(self) -> None: ...
    
    def get_uptime(self) -> float: ...
    def get_connection_count(self) -> int: ...
    def get_transfer_rate(self) -> float: ...
    
    @property
    def is_running(self) -> bool: ...
    
    def reset_stats(self) -> None: ...
    
    async def wait_for_connections(self, timeout: Optional[float] = None) -> bool: ...
    
    def export_metrics(self) -> Dict[str, Any]: ...
    
    async def __aenter__(self) -> 'ServerState': ...
    async def __aexit__(self, 
                       exc_type: Optional[type],
                       exc_val: Optional[Exception],
                       exc_tb: Optional[object]) -> None: ...

    class ContextManager:
        """Context manager for tracking active connections."""
        def __init__(self, state: 'ServerState', connection: ProxyConnection) -> None: ...
        async def __aenter__(self) -> None: ...
        async def __aexit__(self, 
                          exc_type: Optional[type],
                          exc_val: Optional[Exception],
                          exc_tb: Optional[object]) -> None: ...
