"""Type definitions for proxy server logging."""
import logging
from typing import Final, Optional, Dict, Any, Tuple, TextIO, Union
from pathlib import Path

# Main logger instance
logger: Final[logging.Logger]

# Custom log levels
TRACE: Final[int] = 5
STATS: Final[int] = 15

class ProxyLogRecord(logging.LogRecord):
    connection_id: str
    client_addr: Optional[Tuple[str, int]]
    hostname: Optional[str]
    bytes_transferred: int
    duration: float

class ProxyLogger(logging.Logger):
    def trace(self, msg: object, *args: Any, **kwargs: Any) -> None: ...
    def stats(self, msg: object, *args: Any, **kwargs: Any) -> None: ...

class ConnectionLoggerAdapter(logging.LoggerAdapter):
    def __init__(self, logger: logging.Logger, connection_id: str) -> None: ...
    def process(self, msg: str, kwargs: Dict[str, Any]) -> Tuple[str, Dict[str, Any]]: ...
    
    def trace(self, msg: object, *args: Any, **kwargs: Any) -> None: ...
    def stats(self, msg: object, *args: Any, **kwargs: Any) -> None: ...

class AsyncFileHandler(logging.FileHandler):
    async def async_emit(self, record: logging.LogRecord) -> None: ...
    def emit(self, record: logging.LogRecord) -> None: ...

def configure_logging(
    level: Union[int, str] = logging.INFO,
    log_file: Optional[Union[str, Path]] = None,
    debug_file: Optional[Union[str, Path]] = None,
    format_string: Optional[str] = None,
    date_format: Optional[str] = None,
    capture_warnings: bool = True,
    json_output: bool = False,
    async_handlers: bool = True
) -> None: ...

def get_logger(name: str) -> ProxyLogger: ...
def get_connection_logger(connection_id: str) -> ConnectionLoggerAdapter: ...

def setup_json_logging() -> None: ...
def setup_syslog_logging() -> None: ...
def setup_metrics_logging() -> None: ...

class LogMetrics:
    @staticmethod
    def get_logging_stats() -> Dict[str, Any]: ...
    @staticmethod
    def reset_counters() -> None: ...

class AsyncLogQueue:
    async def enqueue(self, record: logging.LogRecord) -> None: ...
    async def process_logs(self) -> None: ...
    async def shutdown(self) -> None: ...
