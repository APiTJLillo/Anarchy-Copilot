name: Test Suite

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.8', '3.9', '3.10']
        test-type: ['unit', 'integration', 'api']

    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        make install
        make install-test

    - name: Set up Nuclei
      if: matrix.test-type == 'integration'
      run: |
        mkdir -p $HOME/.nuclei
        curl -L https://github.com/projectdiscovery/nuclei/releases/download/v2.9.7/nuclei_2.9.7_linux_amd64.zip -o nuclei.zip
        unzip nuclei.zip
        sudo mv nuclei /usr/local/bin/
        nuclei -version

    - name: Lint and Type Check
      if: matrix.test-type == 'unit'
      run: |
        make lint
        make typecheck

    - name: Run Unit Tests
      if: matrix.test-type == 'unit'
      run: make test-unit

    - name: Run Integration Tests
      if: matrix.test-type == 'integration'
      run: make test-integration

    - name: Run API Tests
      if: matrix.test-type == 'api'
      run: make test-api

    - name: Generate Coverage Report
      if: matrix.test-type == 'unit'
      run: make test-coverage

    - name: Upload Coverage Reports
      if: matrix.test-type == 'unit'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        fail_ci_if_error: true

    - name: Upload Test Reports
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: test-reports-${{ matrix.python-version }}-${{ matrix.test-type }}
        path: |
          test-reports/
          htmlcov/
          coverage.xml
          .coverage

  security:
    runs-on: ubuntu-latest
    needs: test
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        cache: 'pip'

    - name: Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit safety pip-audit

    - name: Run Security Checks
      run: make security-check

  report:
    runs-on: ubuntu-latest
    needs: [test, security]
    if: always()
    steps:
    - uses: actions/checkout@v3

    - name: Download Test Reports
      uses: actions/download-artifact@v3
      with:
        path: artifacts

    - name: Consolidate Reports
      run: |
        mkdir -p test-reports
        cp -r artifacts/*/* test-reports/
        python tests/tools/templates/__init__.py generate-report

    - name: Upload Consolidated Report
      uses: actions/upload-artifact@v3
      with:
        name: consolidated-test-report
        path: test-reports/

  notification:
    runs-on: ubuntu-latest
    needs: [test, security, report]
    if: always()
    steps:
    - name: Check Build Status
      run: |
        if [ "${{ needs.test.result }}" != "success" ] || \
           [ "${{ needs.security.result }}" != "success" ]; then
          echo "Build failed! Check test and security reports."
          exit 1
        fi

env:
  PYTHONPATH: ${{ github.workspace }}
  TESTING: "true"
  TEST_DEBUG: "true"
  COVERAGE_THRESHOLD: "80"
