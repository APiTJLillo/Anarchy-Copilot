"""Vulnerability models for the application."""
from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, JSON, Text, Float
from sqlalchemy.orm import relationship
from datetime import datetime
from models.base import Base

class Vulnerability(Base):
    """Model for vulnerabilities."""
    __tablename__ = "vulnerabilities"

    id = Column(Integer, primary_key=True, index=True)
    project_id = Column(Integer, ForeignKey("projects.id"))
    name = Column(String, nullable=False)
    description = Column(Text)
    severity = Column(Float)  # CVSS score
    cve = Column(String)  # CVE identifier if available
    cwe = Column(String)  # CWE identifier if available
    details = Column(JSON, default=dict)  # Additional vulnerability details
    status = Column(String, default="open")  # open, closed, in_progress, etc.
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)

    # Relationships
    project = relationship("Project", back_populates="vulnerabilities")
    results = relationship("VulnerabilityResult", back_populates="vulnerability")

class VulnerabilityResult(Base):
    """Model for vulnerability scan results."""
    __tablename__ = "vulnerability_results"

    id = Column(Integer, primary_key=True, index=True)
    project_id = Column(Integer, ForeignKey("projects.id"))
    vulnerability_id = Column(Integer, ForeignKey("vulnerabilities.id"))
    target = Column(String, nullable=False)  # URL, endpoint, or component affected
    evidence = Column(Text)  # Proof of vulnerability
    result_metadata = Column(JSON, default=dict)  # Additional scan metadata
    created_at = Column(DateTime, default=datetime.utcnow)

    # Relationships
    project = relationship("Project", back_populates="vulnerability_results")
    vulnerability = relationship("Vulnerability", back_populates="results")
