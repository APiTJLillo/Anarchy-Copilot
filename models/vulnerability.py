"""Vulnerability-related models."""
from sqlalchemy import Column, Integer, String, DateTime, ForeignKey, JSON, Enum, Text, Table, Float
from sqlalchemy.orm import relationship
from datetime import datetime
import enum

from database import Base
from .base import Project

# Association tables for many-to-many relationships
vulnerability_tags = Table(
    'vulnerability_tags',
    Base.metadata,
    Column('vulnerability_id', Integer, ForeignKey('vulnerabilities.id')),
    Column('tag_id', Integer, ForeignKey('tags.id'))
)

report_vulnerabilities = Table(
    'report_vulnerabilities',
    Base.metadata,
    Column('report_id', Integer, ForeignKey('reports.id')),
    Column('vulnerability_id', Integer, ForeignKey('vulnerabilities.id'))
)

class SeverityLevel(enum.Enum):
    CRITICAL = "critical"
    HIGH = "high"
    MEDIUM = "medium"
    LOW = "low"
    INFO = "info"

class VulnerabilityStatus(enum.Enum):
    OPEN = "open"
    IN_PROGRESS = "in_progress"
    VERIFIED = "verified"
    FIXED = "fixed"
    WONT_FIX = "wont_fix"
    FALSE_POSITIVE = "false_positive"

class Vulnerability(Base):
    __tablename__ = "vulnerabilities"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    description = Column(Text)
    severity = Column(Enum(SeverityLevel))
    status = Column(Enum(VulnerabilityStatus), default=VulnerabilityStatus.OPEN)
    cvss_score = Column(Float, nullable=True)
    proof_of_concept = Column(Text)
    steps_to_reproduce = Column(Text)
    technical_details = Column(Text)
    recommendation = Column(Text)
    discovered_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Foreign keys
    project_id = Column(Integer, ForeignKey("projects.id"))
    assigned_user_id = Column(Integer, ForeignKey("users.id"), nullable=True)
    recon_result_id = Column(Integer, ForeignKey("recon_results.id"), nullable=True)
    
    # Relationships
    project = relationship("Project", back_populates="vulnerabilities")
    assigned_user = relationship("User", back_populates="assigned_vulnerabilities")
    recon_result = relationship("ReconResult", back_populates="vulnerabilities")
    tags = relationship("Tag", secondary=vulnerability_tags, back_populates="vulnerabilities")
    comments = relationship("VulnerabilityComment", back_populates="vulnerability")
    reports = relationship("Report", secondary=report_vulnerabilities, back_populates="vulnerabilities")

class VulnerabilityComment(Base):
    __tablename__ = "vulnerability_comments"

    id = Column(Integer, primary_key=True, index=True)
    content = Column(Text)
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Foreign keys
    vulnerability_id = Column(Integer, ForeignKey("vulnerabilities.id"))
    user_id = Column(Integer, ForeignKey("users.id"))
    
    # Relationships
    vulnerability = relationship("Vulnerability", back_populates="comments")
    user = relationship("User")

class Tag(Base):
    __tablename__ = "tags"

    id = Column(Integer, primary_key=True, index=True)
    name = Column(String, unique=True, index=True)
    description = Column(Text, nullable=True)
    
    # Relationships
    vulnerabilities = relationship("Vulnerability", secondary=vulnerability_tags, back_populates="tags")

class Report(Base):
    __tablename__ = "reports"

    id = Column(Integer, primary_key=True, index=True)
    title = Column(String, index=True)
    executive_summary = Column(Text)
    methodology = Column(Text)
    findings_summary = Column(Text)
    recommendations = Column(Text)
    conclusion = Column(Text)
    report_type = Column(String)  # e.g., "Technical", "Executive", "Full"
    status = Column(String)  # e.g., "Draft", "In Review", "Final"
    created_at = Column(DateTime, default=datetime.utcnow)
    updated_at = Column(DateTime, default=datetime.utcnow, onupdate=datetime.utcnow)
    
    # Foreign keys
    project_id = Column(Integer, ForeignKey("projects.id"))
    author_id = Column(Integer, ForeignKey("users.id"))
    
    # Relationships
    project = relationship("Project", back_populates="reports")
    author = relationship("User", back_populates="authored_reports")
    vulnerabilities = relationship("Vulnerability", secondary=report_vulnerabilities, back_populates="reports")
