from typing import Any, Callable, Dict, Generic, List, Optional, Type, TypeVar, Union

T = TypeVar("T")

class Session:
    def add(self, instance: Any) -> None: ...
    def commit(self) -> None: ...
    def refresh(self, instance: Any) -> None: ...
    def query(self, *entities: Any, **kwargs: Any) -> "Query": ...

class Query(Generic[T]):
    def filter(self, *criterion: Any) -> "Query[T]": ...
    def all(self) -> List[T]: ...
    def first(self) -> Optional[T]: ...

def relationship(
    argument: Union[Type[Any], str],
    secondary: Optional[Any] = None,
    backref: Optional[str] = None,
    **kwargs: Any,
) -> Any: ...
