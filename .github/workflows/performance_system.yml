name: System Performance Tests

on:
  schedule:
    - cron: '0 0 * * 0'  # Run weekly on Sunday at midnight
  workflow_dispatch:
    inputs:
      stress_level:
        description: 'Stress test intensity (low/medium/high)'
        required: true
        default: 'medium'
      duration:
        description: 'Test duration in minutes'
        required: true
        default: '30'

jobs:
  system-performance:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.10']
        test-profile: ['baseline', 'stress']

    steps:
    - uses: actions/checkout@v3
      with:
        fetch-depth: 0
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
    
    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y stress-ng sysstat

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
    
    - name: Configure system for performance testing
      run: |
        # Increase file descriptor limits
        sudo sysctl -w fs.file-max=1000000
        sudo sysctl -w fs.nr_open=1000000
        ulimit -n 1000000

        # Optimize network settings
        sudo sysctl -w net.core.somaxconn=65535
        sudo sysctl -w net.ipv4.tcp_max_syn_backlog=65535
        sudo sysctl -w net.ipv4.tcp_fin_timeout=30
        sudo sysctl -w net.ipv4.tcp_tw_reuse=1

        # Disable swap to avoid memory distortion
        sudo swapoff -a
    
    - name: Run system tests
      run: |
        # Start system monitoring
        mkdir -p test-results/system
        sar -o test-results/system/cpu.sar 1 > /dev/null 2>&1 &
        sar -r -o test-results/system/mem.sar 1 > /dev/null 2>&1 &
        
        # Run tests with resource monitoring
        python -m pytest \
          tests/proxy/server/handlers/test_perf_system.py \
          --profile ${{ matrix.test-profile }} \
          -v \
          --junitxml=test-results/system/junit.xml \
          --html=test-results/system/report.html \
          --self-contained-html
      env:
        STRESS_LEVEL: ${{ github.event.inputs.stress_level || 'medium' }}
        TEST_DURATION: ${{ github.event.inputs.duration || '30' }}
        PYTHONPATH: ${{ github.workspace }}
    
    - name: Generate system metrics report
      run: |
        # Process SAR data
        sadf -d test-results/system/cpu.sar -- -u > test-results/system/cpu_metrics.csv
        sadf -d test-results/system/mem.sar -- -r > test-results/system/mem_metrics.csv
        
        # Generate visualization
        python scripts/visualize_system_metrics.py \
          --cpu test-results/system/cpu_metrics.csv \
          --memory test-results/system/mem_metrics.csv \
          --output test-results/system/metrics_report.html
    
    - name: Process test results
      if: always()
      run: |
        python scripts/process_perf_results.py \
          --results test-results/system \
          --output test-results/system/summary.md \
          --format github
    
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v3
      with:
        name: system-performance-results-${{ matrix.test-profile }}
        path: test-results/system/
    
    - name: Post results summary
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const fs = require('fs');
          const summary = fs.readFileSync('test-results/system/summary.md', 'utf8');
          
          const conclusion = summary.includes('‚ùå FAILED') ? 'failure' : 'success';
          
          await github.rest.checks.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            name: 'System Performance Tests - ${{ matrix.test-profile }}',
            head_sha: context.sha,
            status: 'completed',
            conclusion: conclusion,
            output: {
              title: 'System Performance Test Results',
              summary: summary
            }
          });
    
    - name: Check performance thresholds
      run: |
        python scripts/check_perf_thresholds.py \
          --results test-results/system \
          --profile ${{ matrix.test-profile }}
      if: always()
    
    - name: Cleanup
      if: always()
      run: |
        # Stop system monitoring
        pkill sar || true
        # Restore swap
        sudo swapon -a
        # Reset system settings
        sudo sysctl -p
