"""Example script demonstrating vulnerability scanning functionality."""

import asyncio
import json
from pathlib import Path
import sys

# Add project root to Python path
project_root = Path(__file__).parent.parent
sys.path.append(str(project_root))

from vuln_module import VulnManager
from vuln_module.models import PayloadType

async def main():
    """Run example vulnerability scan."""
    # Initialize vulnerability manager
    vuln_manager = VulnManager(project_id=1)

    # Target configuration
    target = "http://example.com"
    scan_config = {
        "payload_types": ["XSS", "SQLI", "PATH_TRAVERSAL"],
        "max_depth": 3,
        "threads": 5,
        "timeout": 30,
        "headers": {
            "User-Agent": "Anarchy-Copilot-Scanner/1.0"
        },
        "cookies": {},
        "verify_ssl": True,
        "rate_limit": 10,  # requests per second
        "ai_assistance": True
    }

    try:
        print(f"\nStarting vulnerability scan on {target}")
        print("Configuration:", json.dumps(scan_config, indent=2))

        # Run full vulnerability scan
        results = await vuln_manager.scan_target(
            target=target,
            scanner_type="nuclei",
            config=scan_config
        )

        # Print results
        print(f"\nFound {len(results)} potential vulnerabilities:")
        for vuln in results:
            print(f"\n{'-'*60}")
            print(f"Name: {vuln.name}")
            print(f"Type: {vuln.type}")
            print(f"Severity: {vuln.severity.name}")
            print(f"Endpoint: {vuln.endpoint}")
            print("\nPayloads:")
            for payload in vuln.payloads:
                print(f"  - {payload.payload.content}")
                print(f"    Success: {payload.success}")
                if payload.error:
                    print(f"    Error: {payload.error}")
            
            if vuln.proof_of_concept:
                print(f"\nProof of Concept:\n{vuln.proof_of_concept}")
            
            if vuln.remediation:
                print(f"\nRemediation:\n{vuln.remediation}")

        # Test a specific payload
        print("\nTesting custom XSS payload...")
        test_result = await vuln_manager.test_payload(
            target=target,
            payload="<script>alert(document.domain)</script>",
            payload_type=PayloadType.XSS
        )
        print(f"Payload test result: {'Success' if test_result.success else 'Failed'}")
        if test_result.error:
            print(f"Error: {test_result.error}")

        # Get scan status
        status = vuln_manager.get_scan_status(target)
        print("\nScan Status:")
        print(json.dumps(status, indent=2))

    except Exception as e:
        print(f"Error during scan: {e}")
        vuln_manager.stop_scan(target)
        return 1

    return 0

if __name__ == "__main__":
    exit_code = asyncio.run(main())
    sys.exit(exit_code)
